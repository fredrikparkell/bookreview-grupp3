// <auto-generated />
using System;
using BookReviewGrupp4.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookReviewGrupp4.Migrations
{
    [DbContext(typeof(BookReviewContext))]
    [Migration("20210610120302_hasdataaddition")]
    partial class hasdataaddition
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookReviewGrupp4.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AuthorId");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Country = "Sweden",
                            Name = "Robin Tranberg"
                        },
                        new
                        {
                            AuthorId = 2,
                            Country = "China",
                            Name = "Stefan Trenh"
                        },
                        new
                        {
                            AuthorId = 3,
                            Country = "Colombia",
                            Name = "Edwin Larsson"
                        },
                        new
                        {
                            AuthorId = 4,
                            Country = "Sweden",
                            Name = "Nils Brufors"
                        },
                        new
                        {
                            AuthorId = 5,
                            Country = "Sweden",
                            Name = "Fredrik Parkell"
                        },
                        new
                        {
                            AuthorId = 6,
                            Country = "Sweden",
                            Name = "Johan Nilsson"
                        },
                        new
                        {
                            AuthorId = 7,
                            Country = "Sweden",
                            Name = "Johannes Posse"
                        },
                        new
                        {
                            AuthorId = 8,
                            Country = "Sweden",
                            Name = "Simon Hörnfalk"
                        },
                        new
                        {
                            AuthorId = 9,
                            Country = "Sweden",
                            Name = "Andreas Lind"
                        },
                        new
                        {
                            AuthorId = 10,
                            Country = "Sweden",
                            Name = "Émile Nestor"
                        });
                });

            modelBuilder.Entity("BookReviewGrupp4.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            AverageRating = 0m,
                            Description = "Hej this book is about david",
                            Genre = "Horror",
                            Name = "David on adventure",
                            Published = new DateTime(2018, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3,
                            AverageRating = 0m,
                            Description = "This is my life as a fuckboy and examples on how you can become one too.",
                            Genre = "Biografy",
                            Name = "My life as a fuckboy",
                            Published = new DateTime(2021, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4,
                            AverageRating = 0m,
                            Description = "In this book I'll show you how to cook real food, without vegetables.",
                            Genre = "Food",
                            Name = "How to cook real food",
                            Published = new DateTime(2012, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2,
                            AverageRating = 0m,
                            Description = "This book will guide you on how to easily lift 200 kg in a week, provided that you already can lift 199 kg.",
                            Genre = "Sport",
                            Name = "Lift 200kg in a week",
                            Published = new DateTime(2010, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5,
                            AverageRating = 0m,
                            Description = "Hello, I'm Fredrik. I will show how you can become rich and successful by just eating falukorv every day for the rest of your life.",
                            Genre = "Economy",
                            Name = "How to become successful",
                            Published = new DateTime(2020, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 6,
                            AverageRating = 0m,
                            Description = "I'll guide you on how to get all the trophies in every game. Only for gamers so this book only supports Playstation players",
                            Genre = "Games",
                            Name = "How to get every trophy in every game",
                            Published = new DateTime(2015, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 7,
                            AverageRating = 0m,
                            Description = "How to breed baby ducklings.",
                            Genre = "Animals",
                            Name = "Breeding ducks",
                            Published = new DateTime(2016, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = 8,
                            AuthorId = 8,
                            AverageRating = 0m,
                            Description = "A book that represents SUT20's first party.",
                            Genre = "Party",
                            Name = "Simon är bäst",
                            Published = new DateTime(2020, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = 9,
                            AuthorId = 9,
                            AverageRating = 0m,
                            Description = "A parody of Harry Potter.",
                            Genre = "Science fiction",
                            Name = "Harre Parre",
                            Published = new DateTime(2015, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = 10,
                            AuthorId = 10,
                            AverageRating = 0m,
                            Description = "This is my own experience on how to survive with a cat from (hell).",
                            Genre = "Survival",
                            Name = "My cat from hell",
                            Published = new DateTime(2021, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookReviewGrupp4.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ReviewId");

                    b.HasIndex("BookId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            BookId = 1,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This book sucked",
                            Name = "Nils Brufors",
                            Rating = 3m
                        });
                });

            modelBuilder.Entity("BookReviewGrupp4.Models.Book", b =>
                {
                    b.HasOne("BookReviewGrupp4.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookReviewGrupp4.Models.Review", b =>
                {
                    b.HasOne("BookReviewGrupp4.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookReviewGrupp4.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookReviewGrupp4.Models.Book", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
